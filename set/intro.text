Unordered
Unordered means that the items in a set do not have a defined order.

Set items can appear in a different order every time you use them, and cannot be referred to by index or key.

Unchangeable
Set items are unchangeable, meaning that we cannot change the items after the set has been created.

Once a set is created, you cannot change its items, but you can remove items and add new items.

Duplicates Not Allowed
Sets cannot have two items with the same value.


thisset = {"apple", "banana", "cherry", "apple"}

print(thisset)

Access Items
You cannot access items in a set by referring to an index or a key.

But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using the in keyword.

Add Items
Once a set is created, you cannot change its items, but you can add new items.

To add one item to a set use the add() method.

Add Sets
To add items from another set into the current set, use the update() method.

Remove Item
To remove an item in a set, use the remove(), or the discard() method.

: If the item to remove does not exist, discard() will NOT raise an error.

Note: Sets are unordered, so when using the pop() method, you do not know which item that gets removed.

The clear() method empties the set:

The del keyword will delete the set completely:


set methods

add()	 	Adds an element to the set
clear()	 	Removes all the elements from the set
copy()	 	Returns a copy of the set
difference()	-	Returns a set containing the difference between two or more sets
difference_update()	-=	Removes the items in this set that are also included in another, specified set
discard()	 	Remove the specified item
intersection()	&	Returns a set, that is the intersection of two other sets


intersection_update()	&=	Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	 	Returns whether two sets have a intersection or not
issubset()	<=	Returns whether another set contains this set or not
<	Returns whether all items in this set is present in other, specified set(s)

issuperset()	>=	Returns whether this set contains another set or not

 	>	Returns whether all items in other, specified set(s) is present in this set
pop()	 	Removes an element from the set
remove()	 	Removes the specified element
symmetric_difference()	^	Returns a set with the symmetric differences of two sets
symmetric_difference_update()	^=	Inserts the symmetric differences from this set and another
union()	|	Return a set containing the union of sets
update()	|=	Update the set with the union of this set and others
